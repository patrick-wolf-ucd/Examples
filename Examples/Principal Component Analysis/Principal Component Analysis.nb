(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     22820,        532]
NotebookOptionsPosition[     17665,        457]
NotebookOutlinePosition[     18161,        475]
CellTagsIndexPosition[     18118,        472]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Principal Component Analysis", "Title",
 CellChangeTimes->{
  3.822567763322839*^9},ExpressionUUID->"36b00004-2e9f-4683-bd9a-\
02dffb644432"],

Cell[CellGroupData[{

Cell["Finding important directions", "Section",
 CellChangeTimes->{{3.821298065639636*^9, 3.8212980721688423`*^9}, {
  3.821989679723143*^9, 3.8219896866761436`*^9}, {3.822567767371812*^9, 
  3.822567772076872*^9}},ExpressionUUID->"cabd6c97-23d4-4ba0-ba7a-\
f45ed6da8c15"],

Cell["\<\
We have seen in the lectures how Principal Component Analysis can be used to \
find the \[OpenCurlyDoubleQuote]most important directions\
\[CloseCurlyDoubleQuote] in data. Let\[CloseCurlyQuote]s try it out with a \
simple 2D dataset that roughly fits on a line:\
\>", "Text",
 CellChangeTimes->{{3.821261714371255*^9, 3.8212617148696632`*^9}, {
  3.8219897689842377`*^9, 
  3.821989831978258*^9}},ExpressionUUID->"13af3e83-451e-4a4e-88d7-\
1000ad6fc587"],

Cell["\<\
In the video lectures we had the matrix of data with rows corresponding to \
the variables and columns corresponding to the samples (measurements of those \
variables). Here, we work with the standard convention in statistics and have \
rows for samples and columns for variables so we will need to keep in mind \
this different convention.\
\>", "Text",
 CellChangeTimes->{{3.821989861059564*^9, 3.821989902750708*^9}, {
  3.821989949165165*^9, 3.8219899504028597`*^9}, {3.821989980794836*^9, 
  3.8219900416739597`*^9}, {3.821993351010601*^9, 
  3.821993451981394*^9}},ExpressionUUID->"bc293daf-5d4d-4a94-acf7-\
b496d1b1e65c"],

Cell["\<\
The first thing we need to do is subtract the mean in each column (i.e. \
standardize the data):\
\>", "Text",
 CellChangeTimes->{{3.821993750747079*^9, 3.821993770478919*^9}, {
  3.82199381826602*^9, 3.8219938229880257`*^9}, {3.821995665341416*^9, 
  3.821995672699621*^9}, {3.8219972361429787`*^9, 
  3.821997236843732*^9}},ExpressionUUID->"b6b26fe8-754b-4b3b-baf8-\
0a7a58ef3b15"],

Cell["Next we compute the singular value decomposition.", "Text",
 CellChangeTimes->{{3.821993897758915*^9, 
  3.821993908180545*^9}},ExpressionUUID->"a30f84de-ae8b-4c7b-97de-\
c819284bd632"],

Cell["\<\
As expected, we have two singular values, one which is much larger than the \
other. This reflects the fact that there is much more variance along the line \
than orthogonal to it.\
\>", "Text",
 CellChangeTimes->{{3.821993948030292*^9, 
  3.821993987436459*^9}},ExpressionUUID->"11f67241-72b5-4653-a7d1-\
123a18402950"],

Cell["\<\
The singular vectors in the columns of V give us the \
\[OpenCurlyDoubleQuote]most important\[CloseCurlyDoubleQuote] directions in \
the data\
\>", "Text",
 CellChangeTimes->{{3.821994485779088*^9, 
  3.821994532624415*^9}},ExpressionUUID->"41482608-8006-4da5-af59-\
d3259d1e2ef8"],

Cell["\<\
The singular vectors in the columns of U give us the projection of the data \
long those \[OpenCurlyDoubleQuote]most important\[CloseCurlyDoubleQuote] \
directions (i.e. the same as standardizedData.V)\
\>", "Text",
 CellChangeTimes->{{3.821994485779088*^9, 3.821994532624415*^9}, {
  3.8219948442301817`*^9, 
  3.8219948898067417`*^9}},ExpressionUUID->"7ba9227e-d85d-4804-9cbc-\
2ad09d70cc6c"],

Cell["\<\
We can also directly compute this projected form of the data using \
PrincipalComponents\
\>", "Text",
 CellChangeTimes->{{3.821995944656753*^9, 
  3.821995958522593*^9}},ExpressionUUID->"396910eb-ad24-4c15-a09a-\
fddeef6de798"],

Cell[CellGroupData[{

Cell["In higher dimensions", "Subsection",
 CellChangeTimes->{{3.821996491584209*^9, 
  3.8219964943847303`*^9}},ExpressionUUID->"69fc2dd0-745f-4871-bc9a-\
569458acaa80"],

Cell["Construct a 3-dimensional dataset with 3 variables:", "Text",
 CellChangeTimes->{{3.821997198806382*^9, 
  3.821997216970263*^9}},ExpressionUUID->"a94eff33-39da-4dcc-9d1f-\
b82c2dcefac9"],

Cell["\<\
In this case we choose to standardise by subtracting the mean and dividing by \
the standard deviation\
\>", "Text",
 CellChangeTimes->{{3.82199724472686*^9, 
  3.821997266020989*^9}},ExpressionUUID->"08af93f2-c183-4d1f-b1c9-\
3d5bcd736d65"],

Cell["Next we compute the singular value decomposition.", "Text",
 CellChangeTimes->{{3.821993897758915*^9, 
  3.821993908180545*^9}},ExpressionUUID->"34a552b3-4f8c-4508-8b2f-\
8e2c78529bb7"],

Cell["\<\
As expected, we have two singular values, one which is much larger than the \
other. This reflects the fact that there is much more variance along the line \
than orthogonal to it.\
\>", "Text",
 CellChangeTimes->{{3.821993948030292*^9, 
  3.821993987436459*^9}},ExpressionUUID->"f9b2a820-8642-4251-849c-\
81cf17d9fa5e"],

Cell["\<\
The singular vectors in the columns of V give us the \
\[OpenCurlyDoubleQuote]most important\[CloseCurlyDoubleQuote] directions in \
the data\
\>", "Text",
 CellChangeTimes->{{3.821994485779088*^9, 
  3.821994532624415*^9}},ExpressionUUID->"508072d1-43e3-49ce-9d6c-\
7ead8b87e770"],

Cell["\<\
The singular vectors in the columns of U give us the projection of the data \
long those \[OpenCurlyDoubleQuote]most important\[CloseCurlyDoubleQuote] \
directions (i.e. the same as standardizedData.V)\
\>", "Text",
 CellChangeTimes->{{3.821994485779088*^9, 3.821994532624415*^9}, {
  3.8219948442301817`*^9, 
  3.8219948898067417`*^9}},ExpressionUUID->"8f635ade-7d12-4158-b8aa-\
ddc9a2cb0829"],

Cell["\<\
We can also directly compute this projected form of the data using \
PrincipalComponents\
\>", "Text",
 CellChangeTimes->{{3.821995944656753*^9, 
  3.821995958522593*^9}},ExpressionUUID->"66f3a089-4904-4909-90ad-\
9febc0488d42"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identifying types of flower", "Section",
 CellChangeTimes->{{3.8219896645927277`*^9, 3.821989670170643*^9}, {
  3.822026885405249*^9, 
  3.822026891574415*^9}},ExpressionUUID->"ca9dccf1-41f7-4cdc-b990-\
8b7ebf833162"],

Cell["\<\
Let\[CloseCurlyQuote]s now use PCA to identify the type of a flower based on \
measurements of their properties. We will work with a dataset for three \
different types of iris: setosa, versicolor and virginica.\
\>", "Text",
 CellChangeTimes->{{3.821997752460844*^9, 3.821997790446974*^9}, {
  3.8220269051508627`*^9, 3.822026954221487*^9}, {3.8220269986092052`*^9, 
  3.8220270286473017`*^9}},ExpressionUUID->"bb70450c-5a46-4797-bf36-\
7d8933b0ab16"],

Cell["\<\
The dataset is available directly through Mathematica and contains 4 \
variables for the length and width of the sepals and petals (in centimeters). \
Let\[CloseCurlyQuote]s load the data:\
\>", "Text",
 CellChangeTimes->{{3.822026962314794*^9, 
  3.822027017761835*^9}},ExpressionUUID->"43058145-d45f-4e6b-b311-\
08fa651cd2f1"],

Cell["Rearrange the data so that it is grouped by species:", "Text",
 CellChangeTimes->{{3.822028287841877*^9, 
  3.8220282970854073`*^9}},ExpressionUUID->"96cdb699-bcd1-411f-9285-\
b738bba0dff8"],

Cell["\<\
Let\[CloseCurlyQuote]s first try to plot the data. This is a 4-dimensional \
dataset (one dimension for each variable) so we don\[CloseCurlyQuote]t have \
an easy way to visualise it all. Instead,  just visualise three dimensions by \
dropping one dimension\
\>", "Text",
 CellChangeTimes->{{3.822028428962113*^9, 
  3.822028497848538*^9}},ExpressionUUID->"7b29358f-af96-4a22-8bb7-\
9cdf1aa87643"],

Cell["\<\
It looks like there is hope for separating out the species based on their \
properties, but it is difficult working with 4-dimensional data. Instead, let\
\[CloseCurlyQuote]s project it onto the two-dimensional space spanned by the \
first two principal components. We do this as before: standardize the data, \
use the SVD to find the principal components and the projection of the data \
onto those components and then un-standardize the result for plotting.  \
Instead of doing those steps manually again, let\[CloseCurlyQuote]s use \
Mathematica\[CloseCurlyQuote]s DimensionReduction function which does exactly \
that. We tell it to use Principal Component Analysis and to project onto two \
dimensions\
\>", "Text",
 CellChangeTimes->{{3.822028509199498*^9, 
  3.822028719133795*^9}},ExpressionUUID->"21e0cb44-fac9-4a6a-8358-\
4ff2c73bbf20"],

Cell["\<\
The result is a DimensionReducerFunction which takes in a vector of 4 numbers \
and returns a vector of two numbers obtained by projecting along the two \
principal directions. We now apply this projection function to our iris data\
\>", "Text",
 CellChangeTimes->{{3.822028728499848*^9, 3.822028768968663*^9}, {
  3.82202881732827*^9, 
  3.822028856552979*^9}},ExpressionUUID->"ffa87055-2228-4433-83b7-\
9d4ea8d50eaf"],

Cell["\<\
When we plot this lower dimensional representation of the data, we can \
clearly delineate between the species:\
\>", "Text",
 CellChangeTimes->{{3.82202988261653*^9, 
  3.822029905971447*^9}},ExpressionUUID->"5ec87d40-bfd2-4a87-9ad1-\
4c3b80edc70e"],

Cell["\<\
We can go even further than this. We have seen how we can use PCA to project \
high-dimensional data onto a lower dimensional surface, but we could also \
reconstruct those projected vectors in the original 4-dimensional space. For \
example, let\[CloseCurlyQuote]s take one sample of the setosa species:\
\>", "Text",
 CellChangeTimes->{{3.822029909269264*^9, 3.8220299157842216`*^9}, {
  3.822030188831064*^9, 3.82203023632477*^9}, {3.822030268053771*^9, 
  3.822030268783704*^9}, {3.822030398771963*^9, 3.822030401340191*^9}, {
  3.8220305784492397`*^9, 3.822030586464943*^9}, {3.822030860774939*^9, 
  3.822030893868408*^9}},ExpressionUUID->"66290fcf-5470-4dc2-a8a7-\
f8c298f121e1"],

Cell["We can project this onto the lower-dimensional space:", "Text",
 CellChangeTimes->{{3.82203090988809*^9, 
  3.82203091876994*^9}},ExpressionUUID->"8b968971-c488-4ec3-b76b-\
5c81f91903db"],

Cell["\<\
Then we can take these principal components and combine them with the \
principal component vectors to reconstruct a 4-vector in the original space. \
This will be the closest point on our lower-dimensional surface to the \
original 4-dimensional sample:\
\>", "Text",
 CellChangeTimes->{{3.822030928011619*^9, 3.822030979441312*^9}, {
   3.822031113458107*^9, 3.822031129756094*^9}, {3.8220311784781427`*^9, 
   3.822031183122361*^9}, {3.822031225153006*^9, 3.822031258526787*^9}, 
   3.822031297032358*^9, {3.822032249364324*^9, 
   3.8220322523225517`*^9}},ExpressionUUID->"8a701d98-f6f5-45f7-bfdf-\
f56a43d7a158"],

Cell["\<\
We can do these two steps (projection and reconstruction) in one go by asking \
for the reconstructed vector directly:\
\>", "Text",
 CellChangeTimes->{{3.822031268154028*^9, 
  3.822031295206451*^9}},ExpressionUUID->"8132d46f-5826-4be9-a2fe-\
d58bda9bc7fa"],

Cell["Now let\[CloseCurlyQuote]s do this for all sample points and plot the \
result:", "Text",
 CellChangeTimes->{{3.822032352533532*^9, 
  3.8220323686512213`*^9}},ExpressionUUID->"5df37c7b-2870-4e93-91bf-\
e90f2f33e164"],

Cell["\<\
Finally, we can also use this approach to fill in missing data. For example, \
say we had missed a measurement for our first setosa sample \
\>", "Text",
 CellChangeTimes->{{3.822032432615691*^9, 
  3.822032472408146*^9}},ExpressionUUID->"b81abec2-d724-4338-8f18-\
57aa9ba023b0"],

Cell["We can still project this onto the lower dimensional space", "Text",
 CellChangeTimes->{{3.822032486555703*^9, 
  3.8220325174698257`*^9}},ExpressionUUID->"0df6ed88-c985-47c1-94e5-\
294a92a2e8e6"],

Cell["\<\
And we can reconstruct a 4-dimensional vector from this, \
\[OpenCurlyDoubleQuote]filling in\[CloseCurlyDoubleQuote] the missing  piece:\
\
\>", "Text",
 CellChangeTimes->{{3.822032557580513*^9, 
  3.8220325769620867`*^9}},ExpressionUUID->"b50624bb-f9a5-4e83-acf4-\
7b784f5d5ff3"],

Cell["\<\
If all we want to do is fill in the missing piece and leave the others \
unchanged, then we could do that too:\
\>", "Text",
 CellChangeTimes->{{3.822032580459586*^9, 
  3.8220325971983843`*^9}},ExpressionUUID->"2481a076-d59d-434e-b1c9-\
f6435968604a"],

Cell["\<\
We won\[CloseCurlyQuote]t cover this idea further in this module, but this is \
a lot of information about data imputation available online.\
\>", "Text",
 CellChangeTimes->{{3.822032611018156*^9, 3.82203262726687*^9}, {
  3.822032706976388*^9, 
  3.822032723120388*^9}},ExpressionUUID->"328c081d-24c0-4a60-aebd-\
b3890cd63ed1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Handwriting recognition", "Section",
 CellChangeTimes->{{3.821985161740225*^9, 
  3.821985166975065*^9}},ExpressionUUID->"c8917f6b-6a1e-497a-b15a-\
0427e1e9c97a"],

Cell["\<\
We now look at another example: handwriting recognition, and in particular \
reading numbers. The National Institute of Standards and Technology in the US \
have produced a set of 60,000 handwritten numbers collected from Census \
Bureau employees and high school students. Let\[CloseCurlyQuote]s first load \
the dataset (this may take a few seconds to download the first time you run \
it).\
\>", "Text",
 CellChangeTimes->{{3.822029013498911*^9, 3.822029035055365*^9}, {
  3.822032738798958*^9, 3.822032749518331*^9}, {3.822032861665357*^9, 
  3.822032884182498*^9}, {3.822032975517097*^9, 
  3.8220330119261007`*^9}},ExpressionUUID->"3885e468-b429-477d-8207-\
9041991cc8fa"],

Cell["\<\
This is a list of 60,000 entries, each with an image of a handwritten number \
and the corresponding integer label (as interpreted by a human). Take a \
random sample of 30 entries to get an idea of what they look like\
\>", "Text",
 CellChangeTimes->{{3.8220330577685127`*^9, 
  3.82203317073836*^9}},ExpressionUUID->"77564320-aac7-4fe5-8f92-\
d440acf89c39"],

Cell["Group the entries by the number they represent", "Text",
 CellChangeTimes->{{3.8220332842768097`*^9, 
  3.8220332908888597`*^9}},ExpressionUUID->"3214cc16-f618-4609-a695-\
435f0628a557"],

Cell["We will just work with the zeros and ones", "Text",
 CellChangeTimes->{{3.822033844510476*^9, 
  3.822033854914041*^9}},ExpressionUUID->"bc99a32a-5644-41e6-adee-\
c0ab8a8a8d9e"],

Cell["\<\
If we think of each 28 x 28 image as a 784 dimensional vector, then we can \
consider this as a set of 12,665 samples in a 784 dimensional vector space. A \
random vector in that space won\[CloseCurlyQuote]t look like much, but the \
12,665 samples are special as they represent important \
\[OpenCurlyDoubleQuote]directions\[CloseCurlyDoubleQuote] in this space.\
\>", "Text",
 CellChangeTimes->{{3.8220339465872297`*^9, 3.822034045970973*^9}, {
  3.822034206182135*^9, 
  3.82203421517177*^9}},ExpressionUUID->"9c931891-2f40-4d04-8347-\
bac4654bcd5f"],

Cell["\<\
Let\[CloseCurlyQuote]s see if PCA will allow us to identify the important \
\[OpenCurlyDoubleQuote]directions\[CloseCurlyDoubleQuote] corresponding to \
zeros and ones, and even to differentiate between them. First, let\
\[CloseCurlyQuote]s convert the images to vectors of numbers:\
\>", "Text",
 CellChangeTimes->{{3.822034103846882*^9, 3.822034145617293*^9}, {
  3.822034204498136*^9, 3.822034250339089*^9}, {3.822034284771891*^9, 
  3.822034300001247*^9}},ExpressionUUID->"b1e1e1cd-8c4e-45c3-8230-\
00b8fb25b615"],

Cell["\<\
Now that we have a matrix, we can use PCA to reduce the 784 dimensional \
vectors to just the two most important ones\
\>", "Text",
 CellChangeTimes->{{3.822034898781403*^9, 
  3.822034927819832*^9}},ExpressionUUID->"4ae13b15-ade7-4856-a14b-\
119b9900d6cf"],

Cell["\<\
Now we map our dimension reduction projection function over all of the images \
in our training set\
\>", "Text",
 CellChangeTimes->{{3.822034864953619*^9, 3.822034882829431*^9}, {
  3.822034950832604*^9, 
  3.822034952125383*^9}},ExpressionUUID->"7b6d6713-05c2-44c5-8059-\
f72b253dfa8f"],

Cell["\<\
If we now visualise all of those samples on our two-dimensional space, we can \
quite clearly distinguish between zeros and ones:\
\>", "Text",
 CellChangeTimes->{{3.822035019005986*^9, 
  3.822035041884879*^9}},ExpressionUUID->"d246499a-61cf-4714-8a53-\
a897dd4e5d06"],

Cell["\<\
That\[CloseCurlyQuote]s all well and good, but it could be that we have just \
trained our model to understand the images in the training dataset we used. \
What if we were to throw a new, previously unseen image at it? The MNIST \
dataset is separated into training and testing datasets for exactly this \
purpose. Let\[CloseCurlyQuote]s load the test data and see how that fares\
\>", "Text",
 CellChangeTimes->{{3.82203506286215*^9, 
  3.822035160758116*^9}},ExpressionUUID->"50f880f7-6776-417e-bf9c-\
c014e4eb882e"],

Cell["\<\
If we now visualise all of those samples on our two-dimensional space, we can \
quite clearly distinguish between zeros and ones:\
\>", "Text",
 CellChangeTimes->{{3.822035019005986*^9, 
  3.822035041884879*^9}},ExpressionUUID->"d492e42f-3f59-48ff-801c-\
5b64b8458865"],

Cell["\<\
We can also reconstruct what our model thinks a zero and a one look like:\
\>", "Text",
 CellChangeTimes->{{3.822036374555936*^9, 
  3.822036396134006*^9}},ExpressionUUID->"32299fd2-40b3-4170-889c-\
83b99cb84c4f"],

Cell["\<\
And we can even use it to fill in missing data, as we did in the iris case:\
\>", "Text",
 CellChangeTimes->{{3.822036399949534*^9, 
  3.822036412391017*^9}},ExpressionUUID->"123254fd-08ec-48ce-bddd-\
63ccf3e9fa10"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1420, 645},
WindowMargins->{{Automatic, -1483}, {Automatic, 145}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"cf76fbb4-ce6f-4864-abff-cd231cb58e58"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 147, 3, 98, "Title",ExpressionUUID->"36b00004-2e9f-4683-bd9a-02dffb644432"],
Cell[CellGroupData[{
Cell[752, 29, 272, 4, 67, "Section",ExpressionUUID->"cabd6c97-23d4-4ba0-ba7a-f45ed6da8c15"],
Cell[1027, 35, 464, 9, 35, "Text",ExpressionUUID->"13af3e83-451e-4a4e-88d7-1000ad6fc587"],
Cell[1494, 46, 638, 11, 58, "Text",ExpressionUUID->"bc293daf-5d4d-4a94-acf7-b496d1b1e65c"],
Cell[2135, 59, 393, 8, 35, "Text",ExpressionUUID->"b6b26fe8-754b-4b3b-baf8-0a7a58ef3b15"],
Cell[2531, 69, 191, 3, 35, "Text",ExpressionUUID->"a30f84de-ae8b-4c7b-97de-c819284bd632"],
Cell[2725, 74, 330, 7, 35, "Text",ExpressionUUID->"11f67241-72b5-4653-a7d1-123a18402950"],
Cell[3058, 83, 291, 7, 35, "Text",ExpressionUUID->"41482608-8006-4da5-af59-d3259d1e2ef8"],
Cell[3352, 92, 404, 8, 35, "Text",ExpressionUUID->"7ba9227e-d85d-4804-9cbc-2ad09d70cc6c"],
Cell[3759, 102, 238, 6, 35, "Text",ExpressionUUID->"396910eb-ad24-4c15-a09a-fddeef6de798"],
Cell[CellGroupData[{
Cell[4022, 112, 170, 3, 54, "Subsection",ExpressionUUID->"69fc2dd0-745f-4871-bc9a-569458acaa80"],
Cell[4195, 117, 193, 3, 35, "Text",ExpressionUUID->"a94eff33-39da-4dcc-9d1f-b82c2dcefac9"],
Cell[4391, 122, 251, 6, 35, "Text",ExpressionUUID->"08af93f2-c183-4d1f-b1c9-3d5bcd736d65"],
Cell[4645, 130, 191, 3, 35, "Text",ExpressionUUID->"34a552b3-4f8c-4508-8b2f-8e2c78529bb7"],
Cell[4839, 135, 330, 7, 35, "Text",ExpressionUUID->"f9b2a820-8642-4251-849c-81cf17d9fa5e"],
Cell[5172, 144, 291, 7, 35, "Text",ExpressionUUID->"508072d1-43e3-49ce-9d6c-7ead8b87e770"],
Cell[5466, 153, 404, 8, 35, "Text",ExpressionUUID->"8f635ade-7d12-4158-b8aa-ddc9a2cb0829"],
Cell[5873, 163, 238, 6, 35, "Text",ExpressionUUID->"66f3a089-4904-4909-90ad-9febc0488d42"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6160, 175, 223, 4, 67, "Section",ExpressionUUID->"ca9dccf1-41f7-4cdc-b990-8b7ebf833162"],
Cell[6386, 181, 462, 8, 35, "Text",ExpressionUUID->"bb70450c-5a46-4797-bf36-7d8933b0ab16"],
Cell[6851, 191, 338, 7, 35, "Text",ExpressionUUID->"43058145-d45f-4e6b-b311-08fa651cd2f1"],
Cell[7192, 200, 196, 3, 35, "Text",ExpressionUUID->"96cdb699-bcd1-411f-9285-b738bba0dff8"],
Cell[7391, 205, 407, 8, 35, "Text",ExpressionUUID->"7b29358f-af96-4a22-8bb7-9cdf1aa87643"],
Cell[7801, 215, 857, 14, 104, "Text",ExpressionUUID->"21e0cb44-fac9-4a6a-8358-4ff2c73bbf20"],
Cell[8661, 231, 429, 8, 58, "Text",ExpressionUUID->"ffa87055-2228-4433-83b7-9d4ea8d50eaf"],
Cell[9093, 241, 260, 6, 35, "Text",ExpressionUUID->"5ec87d40-bfd2-4a87-9ad1-4c3b80edc70e"],
Cell[9356, 249, 696, 11, 58, "Text",ExpressionUUID->"66290fcf-5470-4dc2-a8a7-f8c298f121e1"],
Cell[10055, 262, 193, 3, 35, "Text",ExpressionUUID->"8b968971-c488-4ec3-b76b-5c81f91903db"],
Cell[10251, 267, 627, 11, 58, "Text",ExpressionUUID->"8a701d98-f6f5-45f7-bfdf-f56a43d7a158"],
Cell[10881, 280, 268, 6, 35, "Text",ExpressionUUID->"8132d46f-5826-4be9-a2fe-d58bda9bc7fa"],
Cell[11152, 288, 223, 4, 35, "Text",ExpressionUUID->"5df37c7b-2870-4e93-91bf-e90f2f33e164"],
Cell[11378, 294, 289, 6, 35, "Text",ExpressionUUID->"b81abec2-d724-4338-8f18-57aa9ba023b0"],
Cell[11670, 302, 202, 3, 35, "Text",ExpressionUUID->"0df6ed88-c985-47c1-94e5-294a92a2e8e6"],
Cell[11875, 307, 290, 7, 35, "Text",ExpressionUUID->"b50624bb-f9a5-4e83-acf4-7b784f5d5ff3"],
Cell[12168, 316, 262, 6, 35, "Text",ExpressionUUID->"2481a076-d59d-434e-b1c9-f6435968604a"],
Cell[12433, 324, 338, 7, 35, "Text",ExpressionUUID->"328c081d-24c0-4a60-aebd-b3890cd63ed1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12808, 336, 168, 3, 67, "Section",ExpressionUUID->"c8917f6b-6a1e-497a-b15a-0427e1e9c97a"],
Cell[12979, 341, 688, 12, 58, "Text",ExpressionUUID->"3885e468-b429-477d-8207-9041991cc8fa"],
Cell[13670, 355, 369, 7, 58, "Text",ExpressionUUID->"77564320-aac7-4fe5-8f92-d440acf89c39"],
Cell[14042, 364, 192, 3, 35, "Text",ExpressionUUID->"3214cc16-f618-4609-a695-435f0628a557"],
Cell[14237, 369, 183, 3, 35, "Text",ExpressionUUID->"bc99a32a-5644-41e6-adee-c0ab8a8a8d9e"],
Cell[14423, 374, 563, 10, 58, "Text",ExpressionUUID->"9c931891-2f40-4d04-8347-bac4654bcd5f"],
Cell[14989, 386, 527, 9, 35, "Text",ExpressionUUID->"b1e1e1cd-8c4e-45c3-8230-00b8fb25b615"],
Cell[15519, 397, 267, 6, 35, "Text",ExpressionUUID->"4ae13b15-ade7-4856-a14b-119b9900d6cf"],
Cell[15789, 405, 298, 7, 35, "Text",ExpressionUUID->"7b6d6713-05c2-44c5-8059-f72b253dfa8f"],
Cell[16090, 414, 279, 6, 35, "Text",ExpressionUUID->"d246499a-61cf-4714-8a53-a897dd4e5d06"],
Cell[16372, 422, 529, 9, 58, "Text",ExpressionUUID->"50f880f7-6776-417e-bf9c-c014e4eb882e"],
Cell[16904, 433, 279, 6, 35, "Text",ExpressionUUID->"d492e42f-3f59-48ff-801c-5b64b8458865"],
Cell[17186, 441, 223, 5, 35, "Text",ExpressionUUID->"32299fd2-40b3-4170-889c-83b99cb84c4f"],
Cell[17412, 448, 225, 5, 35, "Text",ExpressionUUID->"123254fd-08ec-48ce-bddd-63ccf3e9fa10"]
}, Open  ]]
}, Open  ]]
}
]
*)

