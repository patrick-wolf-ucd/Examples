(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     72612,       1614]
NotebookOptionsPosition[     62181,       1479]
NotebookOutlinePosition[     62674,       1497]
CellTagsIndexPosition[     62631,       1494]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Low rank approximations", "Title",
 CellChangeTimes->{{3.8213726104536533`*^9, 3.821372616550712*^9}, {
  3.821382744663859*^9, 
  3.8213827570021143`*^9}},ExpressionUUID->"3749f0de-f693-4aaf-a5d1-\
16a58d07f4cf"],

Cell[TextData[{
 "We have seen how the singular value decomposition can be used to identify \
the \[OpenCurlyDoubleQuote]most important\[CloseCurlyDoubleQuote] information \
in a matrix by choosing the \[OpenCurlyDoubleQuote]best\
\[CloseCurlyDoubleQuote] low-rank approximation. One application of this idea \
is in the area of ",
 StyleBox["image compression",
  FontWeight->"Bold"],
 ", where we would like to represent the matrix of pixels in an image in an \
efficient way."
}], "Text",
 CellChangeTimes->{{3.821372661553203*^9, 3.821372687414013*^9}, {
  3.821372797917081*^9, 3.8213728215035667`*^9}, {3.821376874954278*^9, 
  3.821376881889963*^9}, {3.821382038599523*^9, 3.821382070208685*^9}, {
  3.82138276428161*^9, 3.8213827861708307`*^9}, {3.821382839933951*^9, 
  3.821382856315794*^9}, {3.821382896902396*^9, 3.821382934176283*^9}, {
  3.821383007558707*^9, 
  3.8213830079799557`*^9}},ExpressionUUID->"d7076964-f2b5-4bf2-86a7-\
3a425b151fe2"],

Cell[CellGroupData[{

Cell["Flags", "Section",
 CellChangeTimes->{{3.821382880429294*^9, 
  3.821382881489284*^9}},ExpressionUUID->"dbfdf7ce-b901-4594-b5a9-\
8e64244300ae"],

Cell["\<\
For image compression, the use of the singular value decomposition will be \
particularly effective in images where there are a lot of horizontal and \
vertical lines. National flags make perfect examples as many of them can be \
represented by low-rank matrices. Before we start, consider each of the flags \
below. Can you put them in order of rank? Can you predict the rank for each \
of the low-rank cases? \
\>", "Text",
 CellChangeTimes->{{3.821383010220546*^9, 3.8213830662243013`*^9}, {
  3.821428300946546*^9, 
  3.821428407792924*^9}},ExpressionUUID->"f22aeb36-7830-4bb9-9a3c-\
73109366af23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"countries", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Ireland\>\"", ",", "\"\<Norway\>\"", ",", "\"\<Germany\>\"", ",", 
     "\"\<Finland\>\"", ",", "\"\<United Kingdom\>\"", ",", 
     "\"\<Czech Republic\>\"", ",", "\"\<Greece\>\"", ",", "\"\<Japan\>\"", 
     ",", "\"\<Nepal\>\"", ",", "\"\<Thailand\>\"", ",", "\"\<Madagascar\>\"",
      ",", "\"\<Tanzania\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8214287054236107`*^9, 3.8214287075228558`*^9}, {
   3.821428882593205*^9, 3.8214288847884073`*^9}, 3.821992288476699*^9},
 CellLabel->"In[1]:=",ExpressionUUID->"2a0662ff-ade2-4c46-9ab8-4bd9eb484f18"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Labeled", "[", 
    RowBox[{
     RowBox[{"Framed", "[", 
      RowBox[{"CountryData", "[", 
       RowBox[{"country", ",", "\"\<Flag\>\""}], "]"}], "]"}], ",", 
     "country"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"country", ",", "countries"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821428550465108*^9, 3.821428551483494*^9}, 
   3.821428661371194*^9, {3.821428704287668*^9, 3.821428789420484*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"bc35a631-684d-46cc-a354-a067cf3e6381"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"flagRank", "[", "country_", "]"}], ":=", 
   RowBox[{"MatrixRank", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ImageData", "[", 
       RowBox[{
        RowBox[{"ColorConvert", "[", 
         RowBox[{
          RowBox[{"CountryData", "[", 
           RowBox[{"country", ",", "\"\<Flag\>\""}], "]"}], ",", 
          "\"\<Grayscale\>\""}], "]"}], ",", 
        RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{"Tolerance", "\[Rule]", 
      SuperscriptBox["10", 
       RowBox[{"-", "3"}]]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8214286404791613`*^9, 3.821428653288719*^9}, {
  3.821428955401606*^9, 3.821428976599969*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"a3923671-9e68-4796-91ee-08bd94cc8290"],

Cell[BoxData[
 RowBox[{"sortedCountries", "=", 
  RowBox[{"SortBy", "[", 
   RowBox[{"countries", ",", "flagRank"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.821428474907536*^9, 3.8214285485933228`*^9}, {
  3.821428675643507*^9, 3.821428688471313*^9}, {3.8214287774787407`*^9, 
  3.821428820188835*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"f70013eb-c8fd-4117-9f01-3606adc4745d"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Labeled", "[", 
    RowBox[{
     RowBox[{"Framed", "[", 
      RowBox[{"CountryData", "[", 
       RowBox[{"country", ",", "\"\<Flag\>\""}], "]"}], "]"}], ",", 
     RowBox[{"country", "<>", "\"\<: \>\"", "<>", 
      RowBox[{"ToString", "[", 
       RowBox[{"flagRank", "[", "country", "]"}], "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"country", ",", "sortedCountries"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.82142882595641*^9, 3.821428845510374*^9}, {
  3.821428910210904*^9, 3.8214289202704973`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"bf653e82-94d2-4380-b0cb-36d013ead821"],

Cell[CellGroupData[{

Cell["Rank-1 flags", "Subsection",
 CellChangeTimes->{{3.821383072394261*^9, 3.821383075441016*^9}, {
  3.8213840921253*^9, 
  3.8213840950978823`*^9}},ExpressionUUID->"5eb00f02-020c-49e5-8ca4-\
aa4fec3d964c"],

Cell["\<\
 Let\[CloseCurlyQuote]s first look at one of the good cases: Ireland. We\
\[CloseCurlyQuote]ll begin by loading the Irish flag from Mathematica\
\[CloseCurlyQuote]s CountryData:\
\>", "Text",
 CellChangeTimes->{{3.821383081088839*^9, 3.82138309596605*^9}, {
  3.8214283037970963`*^9, 
  3.8214283124450903`*^9}},ExpressionUUID->"6046d0fa-1d7f-4f45-be9e-\
d6fbcc0ca3f2"],

Cell[BoxData[
 RowBox[{"flag", "=", 
  RowBox[{"ImageCrop", "[", 
   RowBox[{"CountryData", "[", 
    RowBox[{"\"\<Ireland\>\"", ",", "\"\<Flag\>\""}], "]"}], "]"}]}]], "Input",\

 CellLabel->"In[6]:=",ExpressionUUID->"b2fe8721-79cf-4d0b-9478-882bd122bfc0"],

Cell[BoxData[
 RowBox[{"ImageDimensions", "[", "flag", "]"}]], "Input",
 CellChangeTimes->{{3.821383121747305*^9, 3.821383139571576*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"615669aa-b444-40cc-b455-e855cf13755b"],

Cell["\<\
This is an image built up out pixels represented by a matrix of size 127 x \
255. Each entry in the matrix contains three numbers, one each representing \
how much of red, green and blue is present in that pixel. For simplicity, let\
\[CloseCurlyQuote]s convert these three numbers to a single number by \
converting the colour image to grayscale.\
\>", "Text",
 CellChangeTimes->{{3.8213831103643837`*^9, 
  3.8213833248742323`*^9}},ExpressionUUID->"b5b4bc32-04a2-4e64-bbf9-\
0818428a5b70"],

Cell[BoxData[
 RowBox[{"flagBW", "=", 
  RowBox[{"ColorConvert", "[", 
   RowBox[{"flag", ",", "\"\<Grayscale\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.819714172637595*^9, 3.8197141754647503`*^9}, {
  3.819716315605105*^9, 3.819716317345912*^9}, {3.819716569892667*^9, 
  3.819716570844583*^9}, {3.821383337767776*^9, 3.821383338269891*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"0d29bc5e-17e8-4271-a35e-fc9960739f82"],

Cell["\<\
Next we translate this image into 127 x 255 matrix of numbers in the range \
[0,1] where 0 represents black and 1 represents white.\
\>", "Text",
 CellChangeTimes->{{3.8213833599459248`*^9, 3.821383378997982*^9}, {
  3.821383503584065*^9, 
  3.821383535135927*^9}},ExpressionUUID->"df4ef440-7406-48c7-99c0-\
5ba676d7ae93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flagMatrix", "=", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{"flagBW", ",", 
      RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.819700766450274*^9, 3.819700772201394*^9}, {
   3.819700862488909*^9, 3.8197009049665318`*^9}, {3.819701326579034*^9, 
   3.819701390404606*^9}, {3.819701920899088*^9, 3.8197019225366583`*^9}, 
   3.819714141052367*^9, {3.819714181235093*^9, 3.819714198647834*^9}, {
   3.819714394763907*^9, 3.8197144135821657`*^9}, {3.819714495643897*^9, 
   3.8197145006413393`*^9}, 3.819714611290766*^9, 3.819715142967396*^9, 
   3.819716336040506*^9, 3.821383388799268*^9, 3.8213834384528522`*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"9f7f96d3-ad26-4a1e-bf01-4429065a00e2"],

Cell[BoxData[
 RowBox[{"NumberForm", "[", 
  RowBox[{
   RowBox[{"MatrixForm", "[", 
    RowBox[{"Downsample", "[", 
     RowBox[{"flagMatrix", ",", "20"}], "]"}], "]"}], ",", "1"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8219854279123163`*^9, 3.821985442483067*^9}, {
  3.8219923515455017`*^9, 3.8219923568338842`*^9}, {3.8219925156961527`*^9, 
  3.821992554414962*^9}, {3.8219926012082977`*^9, 3.8219926287415543`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"c6335e22-6d9d-4410-ad3a-0ff1885a7aa3"],

Cell["\<\
Now that we have a matrix, we can compute its singular value decomposition:\
\>", "Text",
 CellChangeTimes->{{3.821383494995969*^9, 3.82138350926128*^9}, {
  3.821383551504621*^9, 
  3.821383562177918*^9}},ExpressionUUID->"9a423892-17ec-4e08-a9f4-\
fb1bb5a16985"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "flagMatrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.819701392463778*^9, 3.8197013964228687`*^9}, {
   3.8197016714093723`*^9, 3.819701706229631*^9}, {3.8197017587694674`*^9, 
   3.819701801280094*^9}, {3.819701853501766*^9, 3.819701857890875*^9}, {
   3.819701924901876*^9, 3.8197019305787897`*^9}, {3.8197019905123243`*^9, 
   3.8197020007931223`*^9}, {3.8197021621833277`*^9, 3.819702201643855*^9}, 
   3.819703455293998*^9, {3.819711787128519*^9, 3.819711787653577*^9}, {
   3.81971391850974*^9, 3.819713918642071*^9}, {3.8197139992613792`*^9, 
   3.81971400777532*^9}, {3.819714288012124*^9, 3.8197142894050007`*^9}, {
   3.8197144855678453`*^9, 3.819714553932866*^9}, 3.819714615648253*^9, {
   3.8213835660905333`*^9, 3.8213835878120832`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"f503c432-9c13-4017-a50a-37809fa70bd8"],

Cell["We can reconstruct the original matrix and image from these:", "Text",
 CellChangeTimes->{{3.821383693872184*^9, 3.821383707359193*^9}, {
  3.8213837392354593`*^9, 
  3.821383741176255*^9}},ExpressionUUID->"6d9dbc82-4b3d-471e-9dbc-\
5ae342bd3f78"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{"U", ".", "\[CapitalSigma]", ".", 
   RowBox[{"Transpose", "[", "V", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821383723352748*^9, 3.8213837327361383`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"3030cbfa-f597-4c78-8cc2-4c3e6562b007"],

Cell["\<\
Let\[CloseCurlyQuote]s look at the singular values, to see how many important \
singular vectors there are:\
\>", "Text",
 CellChangeTimes->{{3.8213836595139513`*^9, 
  3.82138368104055*^9}},ExpressionUUID->"4d5d85c3-cc55-4e3f-b367-\
d60ccd0c3cb1"],

Cell[BoxData["\[Sigma]"], "Input",
 CellChangeTimes->{{3.8213836249645357`*^9, 3.8213836255832853`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"ec6f80c2-0420-4b3c-b1fb-793b5071dde8"],

Cell[BoxData[
 RowBox[{"ListPlot", "[", "\[Sigma]", "]"}]], "Input",
 CellChangeTimes->{{3.821383589980014*^9, 3.821383592498433*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"2dfb43a8-8cd5-41dc-bf3b-1bfdcf16e291"],

Cell["\<\
This is a particularly nice matrix since it only has one singular value. It \
is therefore rank-1 and we have a very efficient low-rank approximation that \
is exact!\
\>", "Text",
 CellChangeTimes->{
  3.8213836837165117`*^9, {3.821383770328486*^9, 
   3.8213837890711317`*^9}},ExpressionUUID->"116c7595-d64c-4c06-9686-\
330fc56bbedc"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{
   RowBox[{"\[Sigma]", "[", 
    RowBox[{"[", "1", "]"}], "]"}], 
   RowBox[{
    RowBox[{"U", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}], "\[TensorProduct]", 
    RowBox[{"V", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8213837925649643`*^9, 3.82138383833599*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"6ac81a26-dc75-4b24-91ca-cca5947396e9"],

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\[Sigma]", "[", 
      RowBox[{"[", "1", "]"}], "]"}], 
     RowBox[{
      RowBox[{"U", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "\[TensorProduct]", 
      RowBox[{"V", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}]}]}], "-", "flagMatrix"}], 
   "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.82138404272899*^9, 3.82138406420931*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"1bf7f547-c8fb-413e-a35e-70cb812c85b5"],

Cell["\<\
This represents the flag by the first singular vector in U, which is just a \
vector with the same number 127 times. This tells us that the flag doesn\
\[CloseCurlyQuote]t change along the vertical.\
\>", "Text",
 CellChangeTimes->{{3.821383852557892*^9, 
  3.821383922658437*^9}},ExpressionUUID->"1eaff618-f5f2-46c2-b6ca-\
61f4537b720f"],

Cell[BoxData[
 RowBox[{"U", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.821383844201679*^9, 3.821383846901813*^9}, {
  3.8213838810962563`*^9, 3.821383885261959*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"a54f0be0-955b-40a5-88d3-7680465982b0"],

Cell["\<\
The first singular vector in V is just a 255 element vector of three numbers, \
representing the darkness of each of the three bands that change along the \
horizontal.\
\>", "Text",
 CellChangeTimes->{{3.821383931346808*^9, 
  3.821384022210888*^9}},ExpressionUUID->"7b2b597a-7fed-440c-9142-\
dfda27692b1f"],

Cell[BoxData[
 RowBox[{"V", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.821383989568575*^9, 3.821383996660095*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"46afac9e-12cc-4287-9c46-1228267df22e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Higher rank flags", "Subsection",
 CellChangeTimes->{{3.821384106132739*^9, 
  3.821384108673048*^9}},ExpressionUUID->"bc39e82c-e57e-499f-81a1-\
734e0db4a259"],

Cell["\<\
Other flags are less simple than the Irish flag. Let\[CloseCurlyQuote]s try \
to figure out what rank the Greek flag is.\
\>", "Text",
 CellChangeTimes->{{3.821385013126275*^9, 
  3.821385040495315*^9}},ExpressionUUID->"78a0e87f-fe3a-4590-9004-\
48fe5562d955"],

Cell["Let\[CloseCurlyQuote]s load the Greek flag from Mathematica\
\[CloseCurlyQuote]s CountryData:", "Text",
 CellChangeTimes->{{3.821383081088839*^9, 3.82138309596605*^9}, {
  3.821385064148036*^9, 
  3.8213850648173656`*^9}},ExpressionUUID->"1b0a0785-b3ea-4bbf-b9bf-\
3d96a3a55eb4"],

Cell[BoxData[
 RowBox[{"flag", "=", 
  RowBox[{"ImageCrop", "[", 
   RowBox[{"CountryData", "[", 
    RowBox[{"\"\<Greece\>\"", ",", "\"\<Flag\>\""}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.821385056615387*^9, 3.8213850575255136`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"682e6b71-6987-4f1e-9001-64b31aecee75"],

Cell[BoxData[
 RowBox[{"ImageDimensions", "[", "flag", "]"}]], "Input",
 CellChangeTimes->{{3.821383121747305*^9, 3.821383139571576*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"99b88853-b304-4c05-871e-7d8e292b42ca"],

Cell["Now convert the colour image to grayscale.", "Text",
 CellChangeTimes->{{3.8213831103643837`*^9, 3.8213833248742323`*^9}, {
  3.821385089736887*^9, 
  3.821385097310774*^9}},ExpressionUUID->"b678c033-87e3-44fa-8467-\
dc0f283ca221"],

Cell[BoxData[
 RowBox[{"flagBW", "=", 
  RowBox[{"ColorConvert", "[", 
   RowBox[{"flag", ",", "\"\<Grayscale\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.819714172637595*^9, 3.8197141754647503`*^9}, {
  3.819716315605105*^9, 3.819716317345912*^9}, {3.819716569892667*^9, 
  3.819716570844583*^9}, {3.821383337767776*^9, 3.821383338269891*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"14f1163b-bbe1-45b1-9cf3-009a473fbdc1"],

Cell["\<\
Next we translate this image into 169 x 255 matrix of numbers in the range \
[0,1] where 0 represents black and 1 represents white.\
\>", "Text",
 CellChangeTimes->{{3.8213833599459248`*^9, 3.821383378997982*^9}, {
  3.821383503584065*^9, 3.821383535135927*^9}, {3.8213851041799*^9, 
  3.821385105202289*^9}},ExpressionUUID->"c8d8249f-1ba1-4699-82d2-\
22380f73b0f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flagMatrix", "=", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{"flagBW", ",", 
      RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.819700766450274*^9, 3.819700772201394*^9}, {
   3.819700862488909*^9, 3.8197009049665318`*^9}, {3.819701326579034*^9, 
   3.819701390404606*^9}, {3.819701920899088*^9, 3.8197019225366583`*^9}, 
   3.819714141052367*^9, {3.819714181235093*^9, 3.819714198647834*^9}, {
   3.819714394763907*^9, 3.8197144135821657`*^9}, {3.819714495643897*^9, 
   3.8197145006413393`*^9}, 3.819714611290766*^9, 3.819715142967396*^9, 
   3.819716336040506*^9, 3.821383388799268*^9, 3.8213834384528522`*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"a74be9b5-b660-4b44-83b4-710c1133c81d"],

Cell["\<\
Now that we have a matrix, we can compute its singular value decomposition:\
\>", "Text",
 CellChangeTimes->{{3.821383494995969*^9, 3.82138350926128*^9}, {
  3.821383551504621*^9, 
  3.821383562177918*^9}},ExpressionUUID->"cf937ae4-c415-4020-b3a5-\
abc2dac1c9be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "flagMatrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.819701392463778*^9, 3.8197013964228687`*^9}, {
   3.8197016714093723`*^9, 3.819701706229631*^9}, {3.8197017587694674`*^9, 
   3.819701801280094*^9}, {3.819701853501766*^9, 3.819701857890875*^9}, {
   3.819701924901876*^9, 3.8197019305787897`*^9}, {3.8197019905123243`*^9, 
   3.8197020007931223`*^9}, {3.8197021621833277`*^9, 3.819702201643855*^9}, 
   3.819703455293998*^9, {3.819711787128519*^9, 3.819711787653577*^9}, {
   3.81971391850974*^9, 3.819713918642071*^9}, {3.8197139992613792`*^9, 
   3.81971400777532*^9}, {3.819714288012124*^9, 3.8197142894050007`*^9}, {
   3.8197144855678453`*^9, 3.819714553932866*^9}, 3.819714615648253*^9, {
   3.8213835660905333`*^9, 3.8213835878120832`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"ca2edb7f-b181-4d30-acb9-331c9af99ff0"],

Cell["It looks like there are only 3 (or maybe 6) singular values:", "Text",
 CellChangeTimes->{{3.821385185903266*^9, 
  3.821385203956046*^9}},ExpressionUUID->"47e35860-928e-449e-84a5-\
c324201ddfd9"],

Cell[BoxData["\[Sigma]"], "Input",
 CellChangeTimes->{{3.821385115059972*^9, 3.821385115736764*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"772a3ac2-149b-4f48-b02c-17d3edc580d2"],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", "\[Sigma]", "]"}]], "Input",
 CellChangeTimes->{{3.821383589980014*^9, 3.821383592498433*^9}, {
  3.8213851728185596`*^9, 3.8213851731511374`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"ab33f5f9-bbce-4dfe-912a-59d0cfd5bc98"],

Cell["\<\
We can reconstruct the original matrix and image from the full set:\
\>", "Text",
 CellChangeTimes->{{3.821383693872184*^9, 3.821383707359193*^9}, {
  3.8213837392354593`*^9, 3.821383741176255*^9}, {3.821385244938142*^9, 
  3.821385247909584*^9}},ExpressionUUID->"16af7c97-13d8-462a-977a-\
38591b2995c6"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{"U", ".", "\[CapitalSigma]", ".", 
   RowBox[{"Transpose", "[", "V", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821383723352748*^9, 3.8213837327361383`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"8a837ffa-3643-44ad-8055-d8fa4de882ef"],

Cell["We can see how this is built up from three rank-1 matrices:", "Text",
 CellChangeTimes->{
  3.8213836837165117`*^9, {3.821383770328486*^9, 3.8213837890711317`*^9}, {
   3.82138527329053*^9, 
   3.8213852832772713`*^9}},ExpressionUUID->"1fb2d8bb-c885-45ea-88c7-\
75204566fbde"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"\[Sigma]", "[", 
       RowBox[{"[", "i", "]"}], "]"}], 
      RowBox[{
       RowBox[{"U", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
       RowBox[{"V", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], 
     RowBox[{"Max", "[", 
      RowBox[{
       RowBox[{"\[Sigma]", "[", 
        RowBox[{"[", "i", "]"}], "]"}], 
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], "]"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "6"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8213837925649643`*^9, 3.82138383833599*^9}, {
  3.821385294266436*^9, 3.8213853049201117`*^9}, {3.821992824193941*^9, 
  3.8219929155369473`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"562bb486-ccdc-4e7b-89e5-32127eb45239"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Medium rank flags", "Subsection",
 CellChangeTimes->{{3.8219850548104267`*^9, 
  3.8219850575656557`*^9}},ExpressionUUID->"7943391a-9936-44bc-8086-\
b9b478fe284b"],

Cell["\<\
The Japanese flag is an example of a medium rank case. Let\[CloseCurlyQuote]s \
first work its SVD\
\>", "Text",
 CellChangeTimes->{{3.821987021204845*^9, 3.821987038504848*^9}, {
  3.821989376315324*^9, 
  3.821989379290986*^9}},ExpressionUUID->"139da28a-2b51-4348-a223-\
be70ac6ef36c"],

Cell[BoxData[
 RowBox[{"flag", "=", 
  RowBox[{"ImageCrop", "[", 
   RowBox[{"CountryData", "[", 
    RowBox[{"\"\<Japan\>\"", ",", "\"\<Flag\>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.821427487221974*^9, 3.82142748775065*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"692c3360-086b-4d94-a21b-57d17833a4d3"],

Cell[BoxData[
 RowBox[{"flagBW", "=", 
  RowBox[{"ColorConvert", "[", 
   RowBox[{"flag", ",", "\"\<Grayscale\>\""}], "]"}]}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"3b997e11-6ab5-4f5b-beb3-bfe94fff23b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flagMatrix", "=", 
   RowBox[{
    RowBox[{"ImageData", "[", 
     RowBox[{"flagBW", ",", 
      RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.821989341745367*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"56cbce6f-54b4-4d9c-a7f8-60e66e54d70f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "flagMatrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}]}], ";"}]}], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"a9f73a83-5abb-4496-93c3-b8cadabdc7f8"],

Cell["There are only about 30-40 singular values:", "Text",
 CellChangeTimes->{{3.821989405305398*^9, 3.821989415206152*^9}, {
  3.821989499664124*^9, 
  3.8219895000135603`*^9}},ExpressionUUID->"aa3a5d01-8f2b-45e6-9bb5-\
07a4b60d8671"],

Cell[BoxData[
 RowBox[{"ListLogLogPlot", "[", "\[Sigma]", "]"}]], "Input",
 CellChangeTimes->{{3.821427509855147*^9, 3.8214275148349247`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"cb30b698-0760-437c-853a-c06332edd2ba"],

Cell["\<\
We can try to understand how the flag is built up by looking at its rank-1 \
pieces\
\>", "Text",
 CellChangeTimes->{{3.821989449188657*^9, 
  3.821989494043456*^9}},ExpressionUUID->"aaa9252d-5cf7-4790-930d-\
d1a708c46977"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"\[Sigma]", "[", 
       RowBox[{"[", "i", "]"}], "]"}], 
      RowBox[{
       RowBox[{"U", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
       RowBox[{"V", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], 
     RowBox[{"Max", "[", 
      RowBox[{
       RowBox[{"\[Sigma]", "[", 
        RowBox[{"[", "i", "]"}], "]"}], 
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], "]"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "40"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8214276333640013`*^9, 3.8214276875507383`*^9}, {
  3.8214277359228697`*^9, 3.821427789676461*^9}, {3.821992933871862*^9, 
  3.8219929368561707`*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"6d354597-ecb0-4202-9f87-0df7faa40d0c"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Sigma]", "[", 
        RowBox[{"[", "i", "]"}], "]"}], 
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "r"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "1", ",", "100", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[67]:=",ExpressionUUID->"4a7f8052-7a1a-4c81-bfe6-bf467e518063"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Full rank flags", "Subsection",
 CellChangeTimes->{{3.8213854589645967`*^9, 
  3.821385462496249*^9}},ExpressionUUID->"5608ee5f-164a-4ee0-ae5b-\
7c72c87bb9b0"],

Cell["\<\
It doesn\[CloseCurlyQuote]t take much of a change to turn a nice and simple \
low-rank flag into something full-rank. Take the Scottish flag, for example:\
\>", "Text",
 CellChangeTimes->{{3.821385464213275*^9, 3.82138549712705*^9}, {
  3.821385530828796*^9, 
  3.821385531801023*^9}},ExpressionUUID->"7042c497-11b7-48db-8e3e-\
1b0be51def51"],

Cell[BoxData[
 RowBox[{
  RowBox[{"scotlandFlag", "=", 
   RowBox[{"ImageResize", "[", 
    RowBox[{
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
        
        "], {{0, 720.}, {1200., 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{1200., 720.},
      PlotRange->{{0, 1200.}, {0, 720.}}], ",", "425"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.819716277809256*^9, 3.819716284715848*^9}, {
  3.819718542863409*^9, 3.819718592157333*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"c94494a2-c30b-47c2-aee7-4f1a770b1078"],

Cell[BoxData[
 RowBox[{"ImageDimensions", "[", "scotlandFlag", "]"}]], "Input",
 CellChangeTimes->{{3.819718510657309*^9, 3.819718527478928*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"65795a44-4d7f-4f7b-9a45-8d8b6da8b7fe"],

Cell["\<\
This looks just as simple as the other flags, but from the point of view of \
the SVD those diagonal lines are a disaster.\
\>", "Text",
 CellChangeTimes->{{3.821385680438339*^9, 
  3.821385708935869*^9}},ExpressionUUID->"d1d2db8f-5d19-4c75-9802-\
8ebf4925e504"],

Cell[BoxData[
 RowBox[{"scotlandFlagBW", "=", 
  RowBox[{"ColorConvert", "[", 
   RowBox[{"scotlandFlag", ",", "\"\<Grayscale\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.819716277809256*^9, 3.819716284715848*^9}, {
   3.819716808199387*^9, 3.8197168297118187`*^9}, 3.819716954234099*^9, {
   3.821385737418643*^9, 3.821385738731268*^9}, {3.8219930141906767`*^9, 
   3.821993017044732*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"97631f70-8229-4d58-b42d-ee8c5e4fe0b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flagMatrix", "=", 
   RowBox[{"ImageData", "[", 
    RowBox[{"scotlandFlagBW", ",", 
     RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.819700766450274*^9, 3.819700772201394*^9}, {
   3.819700862488909*^9, 3.8197009049665318`*^9}, {3.819701326579034*^9, 
   3.819701390404606*^9}, {3.819701920899088*^9, 3.8197019225366583`*^9}, 
   3.819714141052367*^9, {3.819714181235093*^9, 3.819714198647834*^9}, {
   3.819714394763907*^9, 3.8197144135821657`*^9}, {3.819714495643897*^9, 
   3.8197145006413393`*^9}, 3.819714611290766*^9, 3.819715142967396*^9, 
   3.819716336040506*^9, 3.821383388799268*^9, 3.8213834384528522`*^9, 
   3.821385784903273*^9, 3.82199302199166*^9},
 CellLabel->"In[79]:=",ExpressionUUID->"21a24e53-a8e1-4cfc-8fe2-b0d129fe0de9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "flagMatrix", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.819701392463778*^9, 3.8197013964228687`*^9}, {
   3.8197016714093723`*^9, 3.819701706229631*^9}, {3.8197017587694674`*^9, 
   3.819701801280094*^9}, {3.819701853501766*^9, 3.819701857890875*^9}, {
   3.819701924901876*^9, 3.8197019305787897`*^9}, {3.8197019905123243`*^9, 
   3.8197020007931223`*^9}, {3.8197021621833277`*^9, 3.819702201643855*^9}, 
   3.819703455293998*^9, {3.819711787128519*^9, 3.819711787653577*^9}, {
   3.81971391850974*^9, 3.819713918642071*^9}, {3.8197139992613792`*^9, 
   3.81971400777532*^9}, {3.819714288012124*^9, 3.8197142894050007`*^9}, {
   3.8197144855678453`*^9, 3.819714553932866*^9}, 3.819714615648253*^9, {
   3.8213835660905333`*^9, 3.8213835878120832`*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"42d44b20-1ffd-432b-a753-77553d6f26e6"],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", "\[Sigma]", "]"}]], "Input",
 CellChangeTimes->{{3.821383589980014*^9, 3.821383592498433*^9}, {
  3.8213851728185596`*^9, 3.8213851731511374`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"ea0b4330-f1c9-4e74-b139-1984bf20deea"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    RowBox[{"Sum", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"\[Sigma]", "[", 
        RowBox[{"[", "i", "]"}], "]"}], 
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "r"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "1", ",", "100", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821385830740369*^9, 3.821385895882801*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"0bd00ae7-7e56-45b1-b8c5-6b129696c120"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Image", "[", 
    FractionBox[
     RowBox[{
      RowBox[{"\[Sigma]", "[", 
       RowBox[{"[", "i", "]"}], "]"}], 
      RowBox[{
       RowBox[{"U", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
       RowBox[{"V", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], 
     RowBox[{"Max", "[", 
      RowBox[{
       RowBox[{"\[Sigma]", "[", 
        RowBox[{"[", "i", "]"}], "]"}], 
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], "]"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821385942752653*^9, 3.821385943158423*^9}, {
  3.821992992276887*^9, 3.8219929929477243`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"2cc8aa39-945e-42e5-8893-776bfd78f569"],

Cell[TextData[{
 "Given that we know that this should be a simple one, is there something \
that we can do to make the SVD see it? How about if we rotate the image by ",
 Cell[BoxData[
  FormBox[
   FractionBox["\[Pi]", "2"], TraditionalForm]],ExpressionUUID->
  "90ab41ce-03a9-44e5-b5a1-69f7e7449f6c"],
 " first to transform diagonal lines to horizontal and vertical, and then do \
the SVD on the rotated image. "
}], "Text",
 CellChangeTimes->{{3.821385978642861*^9, 
  3.8213860553258257`*^9}},ExpressionUUID->"ac2ac73f-3e45-4898-92bf-\
ef64137f76b5"],

Cell["First, let\[CloseCurlyQuote]s resize and rotate the flag", "Text",
 CellChangeTimes->{{3.821386067566588*^9, 
  3.8213861027576857`*^9}},ExpressionUUID->"542958a3-c99d-4fa3-b2d1-\
007c6071cb71"],

Cell[BoxData[
 RowBox[{"scotlandFlagRotated", "=", 
  RowBox[{"ImageCrop", "[", 
   RowBox[{
    RowBox[{"ImageRotate", "[", 
     RowBox[{
      RowBox[{"ImageResize", "[", 
       RowBox[{"scotlandFlagBW", ",", 
        RowBox[{"{", 
         RowBox[{"255", ",", "255"}], "}"}]}], "]"}], ",", 
      RowBox[{"\[Pi]", "/", "4"}], ",", 
      RowBox[{"Masking", "\[Rule]", "Full"}]}], "]"}], ",", "300"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.821386572017703*^9, 3.821386628248934*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"c80cb0fa-af45-4c05-89f5-2dbd290af6da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"flagMatrixRotated", "=", 
   RowBox[{"ImageData", "[", 
    RowBox[{"scotlandFlagRotated", ",", 
     RowBox[{"Interleaving", "\[Rule]", "False"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.821386210863632*^9, 3.821386248215191*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"03f47a85-a91c-48a1-b377-8d31f67b3810"],

Cell["Now compute the SVD", "Text",
 CellChangeTimes->{{3.821386165171637*^9, 
  3.821386167652452*^9}},ExpressionUUID->"ea00ed71-da08-4797-858f-\
e67743ce5ec8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"UR", ",", "\[CapitalSigma]R", ",", "VR"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "flagMatrixRotated", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]R", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]R", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.819701392463778*^9, 3.8197013964228687`*^9}, {
   3.8197016714093723`*^9, 3.819701706229631*^9}, {3.8197017587694674`*^9, 
   3.819701801280094*^9}, {3.819701853501766*^9, 3.819701857890875*^9}, {
   3.819701924901876*^9, 3.8197019305787897`*^9}, {3.8197019905123243`*^9, 
   3.8197020007931223`*^9}, {3.8197021621833277`*^9, 3.819702201643855*^9}, 
   3.819703455293998*^9, {3.819711787128519*^9, 3.819711787653577*^9}, {
   3.81971391850974*^9, 3.819713918642071*^9}, {3.8197139992613792`*^9, 
   3.81971400777532*^9}, {3.819714288012124*^9, 3.8197142894050007`*^9}, {
   3.8197144855678453`*^9, 3.819714553932866*^9}, 3.819714615648253*^9, {
   3.8213835660905333`*^9, 3.8213835878120832`*^9}, {3.821386254339521*^9, 
   3.821386263220375*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"b9fee97a-8f25-48cd-98d8-803281663702"],

Cell["\<\
We can check that the singular values now fall off quite a bit faster\
\>", "Text",
 CellChangeTimes->{{3.821386307963194*^9, 
  3.821386319987719*^9}},ExpressionUUID->"e9c3d471-e2b4-4dda-8bd8-\
16b2310fdaf6"],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", 
  RowBox[{"{", 
   RowBox[{"\[Sigma]", ",", "\[Sigma]R"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821386293689258*^9, 3.8213863038538446`*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"202afc05-8ae0-49fb-9213-40ad9c3f83cd"],

Cell["Now reconstruct the original flag.", "Text",
 CellChangeTimes->{{3.821386361598111*^9, 3.821386367501863*^9}, {
  3.821386493965519*^9, 
  3.82138649550786*^9}},ExpressionUUID->"8bd7db97-1c8f-4062-be6e-\
2a979f30df47"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ImageResize", "[", 
    RowBox[{
     RowBox[{"ImageRotate", "[", 
      RowBox[{
       RowBox[{"Image", "[", 
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\[Sigma]R", "[", 
            RowBox[{"[", "i", "]"}], "]"}], 
           RowBox[{
            RowBox[{"UR", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "i"}], "]"}], "]"}], "\[TensorProduct]", 
            RowBox[{"VR", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "r"}], "}"}]}], "]"}], "]"}], ",", 
       RowBox[{
        RowBox[{"-", "\[Pi]"}], "/", "4"}], ",", "\"\<MaxAreaCropping\>\""}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"255", ",", "127"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"r", ",", "1", ",", "100", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821386386149364*^9, 3.8213864519640427`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"c6afd2be-b397-46b3-a295-0c7dc3734b8f"],

Cell["We see that it\[CloseCurlyQuote]s almost perfectly rank-2!", "Text",
 CellChangeTimes->{{3.821386497599277*^9, 3.821386515332518*^9}, 
   3.8213866615178633`*^9},ExpressionUUID->"3aa38b2a-4927-4e3d-a39a-\
ee21f3c70147"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Image compression", "Section",
 CellChangeTimes->{{3.821384115462833*^9, 
  3.821384118210629*^9}},ExpressionUUID->"67e33619-aac1-491f-ace1-\
c91b1871ec2b"],

Cell["\<\
Compression using singular values can also be achieve with more complicated \
images. Let\[CloseCurlyQuote]s try it with a photo of UCD. First, we load the \
image and convert it to grayscale\
\>", "Text",
 CellChangeTimes->{{3.8213841216396017`*^9, 3.821384157179367*^9}, {
  3.8213847725247793`*^9, 
  3.821384782556816*^9}},ExpressionUUID->"d5f51845-d523-4ef8-a771-\
189bfd1c5768"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.821384279137416*^9, 3.821384289304167*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"17052896-35bd-46d1-85f9-b2f5347ac496"],

Cell[BoxData[
 RowBox[{"img", "=", 
  RowBox[{"ColorConvert", "[", 
   RowBox[{
    RowBox[{"Import", "[", "\"\<UCD.jpg\>\"", "]"}], ",", 
    "\"\<Grayscale\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.821357284788611*^9, 3.821357313605096*^9}, {
  3.8213599947778683`*^9, 3.821359995376842*^9}, {3.821360076152738*^9, 
  3.821360081373412*^9}, {3.8213622510253*^9, 3.821362251907724*^9}, {
  3.821362338918017*^9, 3.8213623631480017`*^9}, {3.821362408760377*^9, 
  3.8213624091082277`*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"0e6da29c-6464-4e33-ba52-7ee0cdeda4bc"],

Cell["Now convert the grayscale image to a matrix of pixel values.", "Text",
 CellChangeTimes->{{3.821384785808263*^9, 
  3.821384799667306*^9}},ExpressionUUID->"53ef4bd1-9038-4864-9c44-\
d179938da54c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imgData", "=", 
   RowBox[{"ImageData", "[", "img", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.821360062961194*^9, 3.8213600852376547`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"02259860-63af-46ab-86e0-256cdc236f26"],

Cell["Next, compute the SVD:", "Text",
 CellChangeTimes->{{3.8213848026313066`*^9, 
  3.82138480832417*^9}},ExpressionUUID->"5a71649c-81c9-49a3-8c83-\
ff6167c0b209"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", "imgData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.821360067136025*^9, 3.821360104261674*^9}, 
   3.8213602298583107`*^9, {3.821384266974627*^9, 3.821384270541773*^9}, {
   3.821993102842222*^9, 3.8219931030643587`*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"291f4a01-6672-4c92-afc5-86a550dcc618"],

Cell["We can reconstruct the original image from the full SVD", "Text",
 CellChangeTimes->{{3.821384811366639*^9, 
  3.821384820774004*^9}},ExpressionUUID->"5f1ea7d6-391d-4832-a213-\
fa49e59830db"],

Cell[BoxData[
 RowBox[{"Image", "[", 
  RowBox[{"U", ".", "\[CapitalSigma]", ".", 
   RowBox[{"Transpose", "[", "V", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821360293723339*^9, 3.821360302223341*^9}, {
  3.82138430371882*^9, 3.821384307231573*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"f0f93dc4-4122-43d1-8efa-be75fb120405"],

Cell["\<\
We can also get a pretty good approximation by only including the largest \
singular values and vectors\
\>", "Text",
 CellChangeTimes->{{3.821384824473394*^9, 
  3.8213848594327507`*^9}},ExpressionUUID->"f715f0d8-12d3-499e-badf-\
bf1faaac3190"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Labeled", "[", 
    RowBox[{
     RowBox[{"Image", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"U", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], ".", 
        RowBox[{"\[CapitalSigma]", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"1", ";;", "n"}], ",", 
           RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], ".", 
        RowBox[{"Transpose", "[", 
         RowBox[{"V", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}], ",", 
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"n", " ", 
          RowBox[{"Length", "[", "U", "]"}]}], "+", "n", "+", 
         RowBox[{"n", " ", 
          RowBox[{"Length", "[", "V", "]"}]}]}], ",", "\"\</\>\"", ",", 
        RowBox[{
         RowBox[{"Length", "[", "U", "]"}], 
         RowBox[{"Length", "[", "V", "]"}]}]}], "}"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", 
     RowBox[{"Length", "[", "\[CapitalSigma]", "]"}], ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8213624760355253`*^9, 3.8213624832679253`*^9}, {
  3.821362548022517*^9, 3.821362599306139*^9}, {3.821384247461372*^9, 
  3.821384263523828*^9}, {3.8213843109924803`*^9, 3.82138432239063*^9}, {
  3.821384421537752*^9, 3.821384584027175*^9}, {3.821384643299017*^9, 
  3.821384659945633*^9}, {3.821993236370068*^9, 3.8219932891151323`*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"8eb82b00-964a-45c5-adfe-bf89be7f4e3d"],

Cell["\<\
If we plot the singular values, we see that they drop off rapidly until about \
the 100th value. This suggests that stopping around rank-100 is a good choice.\
\>", "Text",
 CellChangeTimes->{{3.821384880127262*^9, 
  3.8213849240534363`*^9}},ExpressionUUID->"b3243a7e-7259-45cc-823a-\
3fcc14ad0b83"],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", 
  RowBox[{
   RowBox[{"Diagonal", "[", "\[CapitalSigma]", "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.821384695091406*^9, 3.821384712418351*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"c9a8095b-e9a8-4ed4-8fea-68fba8047518"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", "=", "100"}], "}"}], ",", 
   RowBox[{"ImageDifference", "[", 
    RowBox[{
     RowBox[{"Image", "[", 
      RowBox[{
       RowBox[{"U", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], ".", 
       RowBox[{"\[CapitalSigma]", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"1", ";;", "n"}], ",", 
          RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], ".", 
       RowBox[{"Transpose", "[", 
        RowBox[{"V", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", 
           RowBox[{"1", ";;", "n"}]}], "]"}], "]"}], "]"}]}], "]"}], ",", 
     "img"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"9a874dbd-deb7-4c21-9f91-8cef605dea06"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Singular value decomposition for approximating functions", "Section",
 CellChangeTimes->{{3.821386865128355*^9, 
  3.821386872862752*^9}},ExpressionUUID->"05e4041f-de11-44bb-987d-\
d36d041fdcdd"],

Cell[TextData[{
 "The singular value decomposition does not only apply to linear algebra. We \
can also use it to get an approximation to an arbitrary function. For \
example, say we have a functional ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["m", "n"], TraditionalForm]],ExpressionUUID->
  "2ccd949b-d5df-4559-b654-62b72dc20b2b"],
 "(x), which is parametrized by n, and for each n we get a function of x. A \
simple example is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "n"], "(", "x", ")"}], "=", 
    RowBox[{"sin", "(", 
     RowBox[{"n", " ", "x"}], ")"}]}], TraditionalForm]],ExpressionUUID->
  "268da988-a8c4-4cd2-be24-cc544ff009d3"],
 " with ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0", "\[LessEqual]", "n", "\[LessEqual]", "10"}], 
   TraditionalForm]],ExpressionUUID->"a7f009a2-8b81-45ea-8da4-f0b7ccf9cf7b"],
 ". In reality, this could be a much more complicated function that we would \
like to approximate in terms of simple functions. In our example, we wish to \
approximate it by a linear combination of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", "(", 
    RowBox[{"n", " ", "x"}], ")"}], TraditionalForm]],ExpressionUUID->
  "ba16704f-fbdc-4519-8834-4801bbfc7931"],
 " (i.e. basis functions) for specific values of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "970ac431-b6a3-451f-993f-e7c128a0cd50"],
 ". The question then is how many specific values of n do we need in our \
basis so that we can  faithfully reproduce the function for all n? We can \
answer this question using the singular value decomposition. For this to \
work, it is important that the function has sufficiently many points in the x \
direction such that it is resolved. The number of singular values gives the \
number of basis functions required. These will all be of the same order. Once \
enough basis functions are included, any further singular values should \
decrease exponentially in magnitude."
}], "Text",
 CellChangeTimes->{{3.821386876469549*^9, 3.8213869459887857`*^9}, {
  3.821386976477116*^9, 
  3.821387140709669*^9}},ExpressionUUID->"2f7fef42-7f8c-4598-aa54-\
4fccb4f5aba9"],

Cell["Let\[CloseCurlyQuote]s evaluate our function on a grid:", "Text",
 CellChangeTimes->{{3.625592703474412*^9, 3.625592787842861*^9}, {
   3.6255930452958393`*^9, 3.6255930579436817`*^9}, 3.82138692823139*^9, {
   3.821387181034205*^9, 
   3.821387185227269*^9}},ExpressionUUID->"8f03376c-acdd-49c2-bdfb-\
261b871b7e0a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Uf", ",", "\[CapitalSigma]f", ",", "Vf"}], "}"}], "=", 
   RowBox[{"SingularValueDecomposition", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"N", "[", 
       RowBox[{"Sin", "[", 
        RowBox[{"n", " ", "x"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", 
        RowBox[{"2", "\[Pi]"}], ",", 
        RowBox[{"2", 
         RowBox[{"\[Pi]", "/", "100"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", "10", ",", 
        RowBox[{"10", "/", "100"}]}], "}"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Sigma]f", "=", 
   RowBox[{"Diagonal", "[", "\[CapitalSigma]f", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6255918617742577`*^9, 3.625591862662616*^9}, {
  3.6255919277945623`*^9, 3.625591953002941*^9}, {3.625592054805627*^9, 
  3.625592147122492*^9}, {3.625592181404914*^9, 3.6255924117266283`*^9}, {
  3.625592656975245*^9, 3.62559266320545*^9}, {3.8213871998166924`*^9, 
  3.821387247331057*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"fe939545-c208-48a1-b0c6-679790f51482"],

Cell[BoxData[
 RowBox[{"ListLogPlot", "[", "\[Sigma]f", "]"}]], "Input",
 CellChangeTimes->{{3.821387248779722*^9, 3.821387265952323*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"1f3f4cda-699e-4af1-bb88-6f4119535ed5"],

Cell[TextData[{
 "We see that in our ",
 Cell[BoxData[
  FormBox[
   RowBox[{"sin", "(", 
    RowBox[{"n", " ", "x"}], ")"}], TraditionalForm]],ExpressionUUID->
  "4de28d81-0f66-4315-9a51-dbd2b9f127a9"],
 " example, computing the singular values reveals that it is sufficient to \
have ~20 basis functions in order to reconstruct any value in the range 0\
\[LessEqual]n\[LessEqual]10."
}], "Text",
 CellChangeTimes->{{3.625593027415509*^9, 3.62559314262429*^9}, {
  3.821387274856439*^9, 
  3.821387288405575*^9}},ExpressionUUID->"63f1b98c-507c-485d-b9f4-\
6adcd44c3e32"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1210, 763},
WindowMargins->{{Automatic, 31}, {Automatic, 119}},
TaggingRules->{
 "WelcomeScreenSettings" -> {"FEStarting" -> False}, "TryRealOnly" -> False},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"eafd9048-e396-4f23-a88a-cf6ebc7b00ad"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 219, 4, 98, "Title",ExpressionUUID->"3749f0de-f693-4aaf-a5d1-16a58d07f4cf"],
Cell[802, 28, 959, 18, 58, "Text",ExpressionUUID->"d7076964-f2b5-4bf2-86a7-3a425b151fe2"],
Cell[CellGroupData[{
Cell[1786, 50, 150, 3, 67, "Section",ExpressionUUID->"dbfdf7ce-b901-4594-b5a9-8e64244300ae"],
Cell[1939, 55, 612, 11, 81, "Text",ExpressionUUID->"f22aeb36-7830-4bb9-9a3c-73109366af23"],
Cell[2554, 68, 656, 12, 52, "Input",ExpressionUUID->"2a0662ff-ade2-4c46-9ab8-4bd9eb484f18"],
Cell[3213, 82, 555, 13, 30, "Input",ExpressionUUID->"bc35a631-684d-46cc-a354-a067cf3e6381"],
Cell[3771, 97, 834, 21, 56, "Input",ExpressionUUID->"a3923671-9e68-4796-91ee-08bd94cc8290"],
Cell[4608, 120, 381, 7, 30, "Input",ExpressionUUID->"f70013eb-c8fd-4117-9f01-3606adc4745d"],
Cell[4992, 129, 665, 15, 30, "Input",ExpressionUUID->"bf653e82-94d2-4380-b0cb-36d013ead821"],
Cell[CellGroupData[{
Cell[5682, 148, 209, 4, 54, "Subsection",ExpressionUUID->"5eb00f02-020c-49e5-8ca4-aa4fec3d964c"],
Cell[5894, 154, 379, 8, 35, "Text",ExpressionUUID->"6046d0fa-1d7f-4f45-be9e-d6fbcc0ca3f2"],
Cell[6276, 164, 257, 6, 30, "Input",ExpressionUUID->"b2fe8721-79cf-4d0b-9478-882bd122bfc0"],
Cell[6536, 172, 215, 3, 30, "Input",ExpressionUUID->"615669aa-b444-40cc-b455-e855cf13755b"],
Cell[6754, 177, 501, 9, 58, "Text",ExpressionUUID->"b5b4bc32-04a2-4e64-bbf9-0818428a5b70"],
Cell[7258, 188, 426, 7, 30, "Input",ExpressionUUID->"0d29bc5e-17e8-4271-a35e-fc9960739f82"],
Cell[7687, 197, 332, 7, 35, "Text",ExpressionUUID->"df4ef440-7406-48c7-99c0-5ba676d7ae93"],
Cell[8022, 206, 833, 15, 30, "Input",ExpressionUUID->"9f7f96d3-ad26-4a1e-bf01-4429065a00e2"],
Cell[8858, 223, 503, 10, 30, "Input",ExpressionUUID->"c6335e22-6d9d-4410-ad3a-0ff1885a7aa3"],
Cell[9364, 235, 273, 6, 35, "Text",ExpressionUUID->"9a423892-17ec-4e08-a9f4-fb1bb5a16985"],
Cell[9640, 243, 1132, 20, 52, "Input",ExpressionUUID->"f503c432-9c13-4017-a50a-37809fa70bd8"],
Cell[10775, 265, 253, 4, 35, "Text",ExpressionUUID->"6d9dbc82-4b3d-471e-9dbc-5ae342bd3f78"],
Cell[11031, 271, 289, 5, 30, "Input",ExpressionUUID->"3030cbfa-f597-4c78-8cc2-4c3e6562b007"],
Cell[11323, 278, 258, 6, 35, "Text",ExpressionUUID->"4d5d85c3-cc55-4e3f-b367-d60ccd0c3cb1"],
Cell[11584, 286, 183, 2, 30, "Input",ExpressionUUID->"ec6f80c2-0420-4b3c-b1fb-793b5071dde8"],
Cell[11770, 290, 213, 3, 30, "Input",ExpressionUUID->"2dfb43a8-8cd5-41dc-bf3b-1bfdcf16e291"],
Cell[11986, 295, 346, 8, 35, "Text",ExpressionUUID->"116c7595-d64c-4c06-9686-330fc56bbedc"],
Cell[12335, 305, 492, 13, 30, "Input",ExpressionUUID->"6ac81a26-dc75-4b24-91ca-cca5947396e9"],
Cell[12830, 320, 574, 16, 30, "Input",ExpressionUUID->"1bf7f547-c8fb-413e-a35e-70cb812c85b5"],
Cell[13407, 338, 348, 7, 35, "Text",ExpressionUUID->"1eaff618-f5f2-46c2-b6ca-61f4537b720f"],
Cell[13758, 347, 299, 6, 30, "Input",ExpressionUUID->"a54f0be0-955b-40a5-88d3-7680465982b0"],
Cell[14060, 355, 318, 7, 35, "Text",ExpressionUUID->"7b2b597a-7fed-440c-9142-dfda27692b1f"],
Cell[14381, 364, 248, 5, 30, "Input",ExpressionUUID->"46afac9e-12cc-4287-9c46-1228267df22e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14666, 374, 165, 3, 54, "Subsection",ExpressionUUID->"bc39e82c-e57e-499f-81a1-734e0db4a259"],
Cell[14834, 379, 270, 6, 35, "Text",ExpressionUUID->"78a0e87f-fe3a-4590-9004-48fe5562d955"],
Cell[15107, 387, 285, 5, 35, "Text",ExpressionUUID->"1b0a0785-b3ea-4bbf-b9bf-3d96a3a55eb4"],
Cell[15395, 394, 325, 7, 30, "Input",ExpressionUUID->"682e6b71-6987-4f1e-9001-64b31aecee75"],
Cell[15723, 403, 216, 3, 30, "Input",ExpressionUUID->"99b88853-b304-4c05-871e-7d8e292b42ca"],
Cell[15942, 408, 237, 4, 35, "Text",ExpressionUUID->"b678c033-87e3-44fa-8467-dc0f283ca221"],
Cell[16182, 414, 427, 7, 30, "Input",ExpressionUUID->"14f1163b-bbe1-45b1-9cf3-009a473fbdc1"],
Cell[16612, 423, 376, 7, 35, "Text",ExpressionUUID->"c8d8249f-1ba1-4699-82d2-22380f73b0f9"],
Cell[16991, 432, 834, 15, 30, "Input",ExpressionUUID->"a74be9b5-b660-4b44-83b4-710c1133c81d"],
Cell[17828, 449, 273, 6, 35, "Text",ExpressionUUID->"cf937ae4-c415-4020-b3a5-abc2dac1c9be"],
Cell[18104, 457, 1132, 20, 52, "Input",ExpressionUUID->"ca2edb7f-b181-4d30-acb9-331c9af99ff0"],
Cell[19239, 479, 202, 3, 35, "Text",ExpressionUUID->"47e35860-928e-449e-84a5-c324201ddfd9"],
Cell[19444, 484, 179, 2, 30, "Input",ExpressionUUID->"772a3ac2-149b-4f48-b02c-17d3edc580d2"],
Cell[19626, 488, 269, 4, 30, "Input",ExpressionUUID->"ab33f5f9-bbce-4dfe-912a-59d0cfd5bc98"],
Cell[19898, 494, 314, 6, 35, "Text",ExpressionUUID->"16af7c97-13d8-462a-977a-38591b2995c6"],
Cell[20215, 502, 289, 5, 30, "Input",ExpressionUUID->"8a837ffa-3643-44ad-8055-d8fa4de882ef"],
Cell[20507, 509, 282, 5, 35, "Text",ExpressionUUID->"1fb2d8bb-c885-45ea-88c7-75204566fbde"],
Cell[20792, 516, 1113, 31, 51, "Input",ExpressionUUID->"562bb486-ccdc-4e7b-89e5-32127eb45239"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21942, 552, 169, 3, 54, "Subsection",ExpressionUUID->"7943391a-9936-44bc-8086-b9b478fe284b"],
Cell[22114, 557, 297, 7, 35, "Text",ExpressionUUID->"139da28a-2b51-4348-a223-be70ac6ef36c"],
Cell[22414, 566, 319, 6, 30, "Input",ExpressionUUID->"692c3360-086b-4d94-a21b-57d17833a4d3"],
Cell[22736, 574, 215, 4, 30, "Input",ExpressionUUID->"3b997e11-6ab5-4f5b-beb3-bfe94fff23b2"],
Cell[22954, 580, 368, 9, 30, "Input",ExpressionUUID->"56cbce6f-54b4-4d9c-a7f8-60e66e54d70f"],
Cell[23325, 591, 412, 10, 52, "Input",ExpressionUUID->"a9f73a83-5abb-4496-93c3-b8cadabdc7f8"],
Cell[23740, 603, 236, 4, 35, "Text",ExpressionUUID->"aa3a5d01-8f2b-45e6-9bb5-07a4b60d8671"],
Cell[23979, 609, 221, 3, 30, "Input",ExpressionUUID->"cb30b698-0760-437c-853a-c06332edd2ba"],
Cell[24203, 614, 233, 6, 35, "Text",ExpressionUUID->"aaa9252d-5cf7-4790-930d-d1a708c46977"],
Cell[24439, 622, 1117, 31, 51, "Input",ExpressionUUID->"6d354597-ecb0-4202-9f87-0df7faa40d0c"],
Cell[25559, 655, 710, 20, 30, "Input",ExpressionUUID->"4a7f8052-7a1a-4c81-bfe6-bf467e518063"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26306, 680, 165, 3, 54, "Subsection",ExpressionUUID->"5608ee5f-164a-4ee0-ae5b-7c72c87bb9b0"],
Cell[26474, 685, 352, 7, 35, "Text",ExpressionUUID->"7042c497-11b7-48db-8e3e-1b0be51def51"],
Cell[26829, 694, 13755, 232, 69, "Input",ExpressionUUID->"c94494a2-c30b-47c2-aee7-4f1a770b1078"],
Cell[40587, 928, 224, 3, 30, "Input",ExpressionUUID->"65795a44-4d7f-4f7b-9a45-8d8b6da8b7fe"],
Cell[40814, 933, 272, 6, 35, "Text",ExpressionUUID->"d1d2db8f-5d19-4c75-9802-8ebf4925e504"],
Cell[41089, 941, 473, 8, 30, "Input",ExpressionUUID->"97631f70-8229-4d58-b42d-ee8c5e4fe0b3"],
Cell[41565, 951, 834, 15, 30, "Input",ExpressionUUID->"21a24e53-a8e1-4cfc-8fe2-b0d129fe0de9"],
Cell[42402, 968, 1132, 20, 52, "Input",ExpressionUUID->"42d44b20-1ffd-432b-a753-77553d6f26e6"],
Cell[43537, 990, 269, 4, 30, "Input",ExpressionUUID->"ea0b4330-f1c9-4e74-b139-1984bf20deea"],
Cell[43809, 996, 776, 21, 30, "Input",ExpressionUUID->"0bd00ae7-7e56-45b1-b8c5-6b129696c120"],
Cell[44588, 1019, 1062, 30, 51, "Input",ExpressionUUID->"2cc8aa39-945e-42e5-8893-776bfd78f569"],
Cell[45653, 1051, 554, 12, 62, "Text",ExpressionUUID->"ac2ac73f-3e45-4898-92bf-ef64137f76b5"],
Cell[46210, 1065, 200, 3, 35, "Text",ExpressionUUID->"542958a3-c99d-4fa3-b2d1-007c6071cb71"],
Cell[46413, 1070, 573, 14, 30, "Input",ExpressionUUID->"c80cb0fa-af45-4c05-89f5-2dbd290af6da"],
Cell[46989, 1086, 357, 8, 30, "Input",ExpressionUUID->"03f47a85-a91c-48a1-b377-8d31f67b3810"],
Cell[47349, 1096, 161, 3, 35, "Text",ExpressionUUID->"ea00ed71-da08-4797-858f-e67743ce5ec8"],
Cell[47513, 1101, 1194, 21, 52, "Input",ExpressionUUID->"b9fee97a-8f25-48cd-98d8-803281663702"],
Cell[48710, 1124, 219, 5, 35, "Text",ExpressionUUID->"e9c3d471-e2b4-4dda-8bd8-16b2310fdaf6"],
Cell[48932, 1131, 273, 5, 30, "Input",ExpressionUUID->"202afc05-8ae0-49fb-9213-40ad9c3f83cd"],
Cell[49208, 1138, 224, 4, 35, "Text",ExpressionUUID->"8bd7db97-1c8f-4062-be6e-2a979f30df47"],
Cell[49435, 1144, 1125, 30, 52, "Input",ExpressionUUID->"c6afd2be-b397-46b3-a295-0c7dc3734b8f"],
Cell[50563, 1176, 225, 3, 35, "Text",ExpressionUUID->"3aa38b2a-4927-4e3d-a39a-ee21f3c70147"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50837, 1185, 162, 3, 67, "Section",ExpressionUUID->"67e33619-aac1-491f-ace1-c91b1871ec2b"],
Cell[51002, 1190, 394, 8, 35, "Text",ExpressionUUID->"d5f51845-d523-4ef8-a771-189bfd1c5768"],
Cell[51399, 1200, 268, 5, 30, "Input",ExpressionUUID->"17052896-35bd-46d1-85f9-b2f5347ac496"],
Cell[51670, 1207, 575, 11, 30, "Input",ExpressionUUID->"0e6da29c-6464-4e33-ba52-7ee0cdeda4bc"],
Cell[52248, 1220, 202, 3, 35, "Text",ExpressionUUID->"53ef4bd1-9038-4864-9c44-d179938da54c"],
Cell[52453, 1225, 259, 5, 30, "Input",ExpressionUUID->"02259860-63af-46ab-86e0-256cdc236f26"],
Cell[52715, 1232, 165, 3, 35, "Text",ExpressionUUID->"5a71649c-81c9-49a3-8c83-ff6167c0b209"],
Cell[52883, 1237, 601, 13, 52, "Input",ExpressionUUID->"291f4a01-6672-4c92-afc5-86a550dcc618"],
Cell[53487, 1252, 197, 3, 35, "Text",ExpressionUUID->"5f1ea7d6-391d-4832-a213-fa49e59830db"],
Cell[53687, 1257, 335, 6, 30, "Input",ExpressionUUID->"f0f93dc4-4122-43d1-8efa-be75fb120405"],
Cell[54025, 1265, 255, 6, 35, "Text",ExpressionUUID->"f715f0d8-12d3-499e-badf-bf1faaac3190"],
Cell[54283, 1273, 1729, 44, 52, "Input",ExpressionUUID->"8eb82b00-964a-45c5-adfe-bf89be7f4e3d"],
Cell[56015, 1319, 310, 6, 35, "Text",ExpressionUUID->"b3243a7e-7259-45cc-823a-3fcc14ad0b83"],
Cell[56328, 1327, 322, 6, 30, "Input",ExpressionUUID->"c9a8095b-e9a8-4ed4-8fea-68fba8047518"],
Cell[56653, 1335, 829, 25, 30, "Input",ExpressionUUID->"9a874dbd-deb7-4c21-9f91-8cef605dea06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57519, 1365, 201, 3, 67, "Section",ExpressionUUID->"05e4041f-de11-44bb-987d-d36d041fdcdd"],
Cell[57723, 1370, 2147, 47, 173, "Text",ExpressionUUID->"2f7fef42-7f8c-4598-aa54-4fccb4f5aba9"],
Cell[59873, 1419, 323, 5, 35, "Text",ExpressionUUID->"8f03376c-acdd-49c2-bdfb-261b871b7e0a"],
Cell[60199, 1426, 1160, 28, 52, "Input",ExpressionUUID->"fe939545-c208-48a1-b0c6-679790f51482"],
Cell[61362, 1456, 217, 3, 30, "Input",ExpressionUUID->"1f3f4cda-699e-4af1-bb88-6f4119535ed5"],
Cell[61582, 1461, 571, 14, 35, "Text",ExpressionUUID->"63f1b98c-507c-485d-b9f4-6adcd44c3e32"]
}, Open  ]]
}, Open  ]]
}
]
*)

